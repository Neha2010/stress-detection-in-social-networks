friends.df<-twListToDF(User_Friends_IDs)
for (x in friends.df$name) {
print(class(toString(x)))
#print(searchTwitter(x,n=1))
Frnddataret(x,no_of_tweets)
}
}
twitter_user_frnd_info_crawlwer<-function(username,nut,nf,nft){
twitterauth()
#Userdataret('type here username to crawl in a file','no of tweets')
Userdataret(username,nut)
friendsinformation(username,nf,nft)
}
twitter_user_frnd_info_crawlwer('narendramodi',500,10,100)
twitterauth<-function(){
setwd('C:\\Users\\guptakas\\Rscripts')
#install.packages("TwitteR")
require('twitteR')
api_key<- "gRFwcBHf7DPbo2X56EYaiMTgQ"
api_secret <- "oWQ1cu6oJxCfFRJKvlrGctgLlMPo5b2HhzqnCDBdzNNiz7kBeZ"
access_token <- "347291173-Ch9M1Jb7TC3DJdpBWE1mrpiyMqOQEsekQBNHp2vu"
access_token_secret <- "hjUKjUhGgeVdhL2QWRgusGJJ3VFjoY5Y1ydlLX5nGlVbk"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
}
Userdataret<-function(tweetuser,nooftweets){
setwd('C:\\Users\\guptakas\\Rscripts\\data\\user')
require('dplyr')
require('twitteR')
require('stringr')
#tweets<-searchTwitter(tweetuser,n=nooftweets)
tweets<-userTimeline(tweetuser,n=nooftweets)
tweets.df<-twListToDF(tweets)
clean_tweet = laply(tweets.df$text, function(tweet) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
})
tweets.df$text<-clean_tweet
temp_df <- twListToDF(lookupUsers(tweetuser))
temp_df
colnames(temp_df)
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(tweets)),]
a
b<-cbind(a,tweets.df$created,tweets.df$text)
names(b)[1]<-paste("user name")
names(b)[18]<-paste("tweets date")
names(b)[19]<-paste("tweet ")
dim(b)
colnames(b)
filename<-tweetuser
Format<-"csv"
File<-paste(filename,Format,sep=".")
write.csv(b, file = File)
}
library(stringr)
library(twitteR)
library(xlsx)
library(dplyr)
twitterauth<-function(){
setwd('C:\\Users\\guptakas\\Rscripts')
#install.packages("TwitteR")
require('twitteR')
api_key<- "gRFwcBHf7DPbo2X56EYaiMTgQ"
api_secret <- "oWQ1cu6oJxCfFRJKvlrGctgLlMPo5b2HhzqnCDBdzNNiz7kBeZ"
access_token <- "347291173-Ch9M1Jb7TC3DJdpBWE1mrpiyMqOQEsekQBNHp2vu"
access_token_secret <- "hjUKjUhGgeVdhL2QWRgusGJJ3VFjoY5Y1ydlLX5nGlVbk"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
}
Frnddataret<-function(tweetuser,nooftweets){
setwd('C:\\Users\\guptakas\\Rscripts\\data\\friends')
require('dplyr')
require('twitteR')
require('stringr')
tweets<-searchTwitter(tweetuser,n=nooftweets)
#tweets<-userTimeline(tweetuser,n=3000)
tweets.df<-twListToDF(tweets)
clean_tweet = laply(tweets.df$text, function(tweet) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
})
tweets.df$text<-clean_tweet
temp_df <- data.frame(x<-tweetuser)
temp_df
colnames(temp_df)
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(tweets)),]
a
b<-cbind(a,tweets.df$created,tweets.df$text)
names(b)[1]<-paste("user name")
names(b)[2]<-paste("tweets date")
names(b)[3]<-paste("tweet ")
dim(b)
colnames(b)
filename<-tweetuser
Format<-"csv"
File<-paste(filename,Format,sep=".")
write.csv(b, file = File)
}
friendsinformation<-function(username,nooffriends,no_of_tweets){
require('twitteR')
require('dplyr')
User <- getUser("narendramodi")
User_Friends_IDs<-User$getFriends(n=nooffriends)
#lucaspuente_follower_IDs<-lucaspuente$getFollowers(n=1000)
#lucaspuente_follower_IDs
#length(lucaspuente_follower_IDs)
length(User_Friends_IDs)
friends.df<-twListToDF(User_Friends_IDs)
for (x in friends.df$name) {
print(class(toString(x)))
#print(searchTwitter(x,n=1))
Frnddataret(x,no_of_tweets)
}
}
twitter_user_frnd_info_crawlwer<-function(username,nut,nf,nft){
twitterauth()
#Userdataret('type here username to crawl in a file','no of tweets')
Userdataret(username,nut)
friendsinformation(username,nf,nft)
}
Userdataret<-function(tweetuser,nooftweets){
setwd('C:\\Users\\guptakas\\Rscripts\\data\\user')
require('dplyr')
require('twitteR')
require('stringr')
#tweets<-searchTwitter(tweetuser,n=nooftweets)
tweets<-userTimeline(tweetuser,n=nooftweets)
tweets.df<-twListToDF(tweets)
clean_tweet = laply(tweets.df$text, function(tweet) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
})
tweets.df$text<-clean_tweet
temp_df <- twListToDF(lookupUsers(tweetuser))
temp_df
colnames(temp_df)
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(tweets)),]
a
b<-cbind(a,tweets.df$created,tweets.df$text)
names(b)[1]<-paste("user name")
names(b)[18]<-paste("tweets date")
names(b)[19]<-paste("tweet ")
dim(b)
colnames(b)
filename<-tweetuser
Format<-"csv"
File<-paste(filename,Format,sep=".")
write.csv(b, file = File)
}
twitter_user_frnd_info_crawlwer('narendramodi',500,10,100)
library(plyr)
twitter_user_frnd_info_crawlwer('narendramodi',500,10,100)
data.frame(tweetuser)
tweetuser<-'hello'
data.frame(tweetuser)
tweetuser<-'hello'
temp_df <- data.frame(tweetuser)
temp_df
colnames(temp_df)
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(tweets)),]
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(5)),]
a
a<-temp_df[rep(seq_len(nrow(temp_df)), each=5),]
a
Frnddataret<-function(tweetuser,nooftweets){
setwd('C:\\Users\\guptakas\\Rscripts\\data\\friends')
require('dplyr')
require('twitteR')
require('stringr')
tweets<-searchTwitter(tweetuser,n=nooftweets)
#tweets<-userTimeline(tweetuser,n=3000)
tweets.df<-twListToDF(tweets)
clean_tweet = laply(tweets.df$text, function(tweet) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
})
tweets.df$text<-clean_tweet
temp_df <- data.frame(tweetuser)
temp_df
colnames(temp_df)
a<-temp_df[rep(seq_len(nrow(temp_df)), each=length(tweets)),]
a
b<-cbind(a,tweets.df$text)
names(b)[1]<-paste("user name")
names(b)[2]<-paste("tweets date")
names(b)[3]<-paste("tweet ")
dim(b)
colnames(b)
filename<-tweetuser
Format<-"csv"
File<-paste(filename,Format,sep=".")
write.csv(b, file = File)
}
friendsinformation<-function(username,nooffriends,no_of_tweets){
require('twitteR')
require('dplyr')
User <- getUser("narendramodi")
User_Friends_IDs<-User$getFriends(n=nooffriends)
#lucaspuente_follower_IDs<-lucaspuente$getFollowers(n=1000)
#lucaspuente_follower_IDs
#length(lucaspuente_follower_IDs)
length(User_Friends_IDs)
friends.df<-twListToDF(User_Friends_IDs)
for (x in friends.df$name) {
print(class(toString(x)))
#print(searchTwitter(x,n=1))
Frnddataret(x,no_of_tweets)
}
}
twitter_user_frnd_info_crawlwer<-function(username,nut,nf,nft){
twitterauth()
#Userdataret('type here username to crawl in a file','no of tweets')
Userdataret(username,nut)
friendsinformation(username,nf,nft)
}
twitter_user_frnd_info_crawlwer('narendramodi',500,10,100)
setwd('C:\\Users\\guptakas\\Rscripts\\dictionary')
a<-read.csv('afinn.txt')
a
afinn<-read.csv('afinn.txt')
afinn
colnames(afinn)
data.frame(afinn)
colnames(afinn)<-c("name","rating")
afinn<-read.csv('afinn.txt')
colnames(afinn)<-c("name","rating")
afinn<-read.csv('afinn.txt',sep = '\t')
colnames(afinn)<-c("name","rating")
colnames(afinn)
str(afinn)
afinn$rating<-factor(afinn$rating)
str(afinn)
library(plyr)
trans<-laply(afinn,function(text){
if(text$rating<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
afinn<-read.csv('afinn.txt',sep = '\t')
colnames(afinn)<-c("name","rating")
colnames(afinn)
#afinn$rating<-factor(afinn$rating)
str(afinn)
trans<-laply(afinn,function(text){
if(text$rating<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
afinn<-data.frame(afinn)
trans<-laply(afinn,function(text){
if(text$rating<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
afinn$rating<-as.integer(afinn$rating)
trans<-laply(afinn,function(text){
if(text$rating<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
trans<-laply(afinn,function(text){
if(text['rating']<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
is.na(afinn$rating)
sum(is.na(afinn$rating))
levels(afinn$rating)
afinn<-read.csv('afinn.txt',sep = '\t')
colnames(afinn)<-c("name","rating")
colnames(afinn)
#afinn$rating<-factor(afinn$rating)
str(afinn)
afinn<-data.frame(afinn)
trans<-laply(afinn,function(text){
if(text['rating']<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
trans<-laply(afinn,function(text){
if(text['rating']<'0'){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
trans<-laply(afinn,function(text){
if(as.integer(text['rating'])<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
trans<-laply(afinn,function(text){
if(as.integer(text['rating'])<0){
text$rating<-'neg'
}
else
text$rating<-'pos'
})
trans
trans<-laply(afinn,function(text){
if(as.integer(text['rating'])<0){
text['rating']<-'neg'
}
else
text['rating']<-'pos'
})
trans<-laply(afinn$rating,function(text){
if(text<0){
text<-'neg'
}
else
text<-'pos'
})
trans
trans<-laply(afinn$rating,function(text){
if(text<=-4){
text<-'high stress'
}
else if(text <=-2)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else
text<-'very happy'
})
trans
trans<-laply(afinn$rating,function(text){
if(text<=-4 && text>=-5){
text<-'high stress'
}
else if(text <=-2 && text>=-3)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else
text<-'very happy'
})
trans
afinn$rating<-laply(afinn$rating,function(text){
if(text<=-4 && text>=-5){
text<-'high stress'
}
else if(text <=-2 && text>=-3)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else
text<-'very happy'
})
afinn
afinn$rating<-laply(afinn$rating,function(text){
if(text<=-4 && text>=-5){
text<-'high stress'
}
else if(text <=-2 && text>=-3)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else if(text>=4 && text <=5)
text<-'very happy'
})
afinn
afinn$rating<-laply(afinn$rating,function(text){
if(text<=-4 && text>=-5){
text<-'high stress'
}
else if(text <=-2 && text>=-3)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else if(text>=4 && text <=5)
text<-'very happy'
})
afinn<-read.csv('afinn.txt',sep = '\t')
colnames(afinn)<-c("name","rating")
colnames(afinn)
#afinn$rating<-factor(afinn$rating)
str(afinn)
afinn<-data.frame(afinn)
afinn$rating<-laply(afinn$rating,function(text){
if(text<=-4 && text>=-5){
text<-'high stress'
}
else if(text <=-2 && text>=-3)
text<-'partial stress'
else if(text <=1 && text >=-1)
text<-'normal'
else if(text>=2 && text<=3)
text<-'happy'
else if(text>=4 && text <=5)
text<-'very happy'
})
afinn
factor(afinn$rating)
x<-split(afinn,afinn$rating)
x[0]
x[1]
x[2]
x[3]
x[4]
x[5]
x[1]
happy<-x[1]
happy
x[2]
highstress<-x[2]
x[3]
normal<-x[3]
x[4]
x[4]
x[5]
happy<-x[1]
highstress<-x[2]
normal<-x[3]
partialstress<-x[4]
veryhappy<-x[5]
x[1][0]
x[1][1]
write.csv(happy,'happy')
write.csv(happy,'happy.csv')
colnames(happy)
colnames(happy)<-c("name","rating")
colnames(happy)<-c("no","name","rating")
happy<-x[1]
colnames(happy)<-c("no","name","rating")
colnames(happy)<-c("name","rating")
write.csv(happy,'happy.csv')
write.csv(highstress,'highstress.csv')
write.csv(normal,'normal.csv')
write.csv(veryhappy,'veryhappy.csv')
write.csv(partialstress,'partialstress.csv')
happy$happy.name
happy<-read.csv('happy.csv')
write.csv(happy,'happy.csv')
happy<-read.csv('happy.csv')
colnames(happy)
happy[0]
happy[1]
happy[2]
happy[3]
write.csv(data.frame(happy[2],happy[3]),'happy.csv')
write.csv(as.data.frame(happy[2],happy[3]),'happy.csv')
write.csv(data.frame(happy[2],happy[3]),'happy.csv')
write.csv(cbind(happy[2],happy[3]),'happy.csv')
write.csv(cbind(happy[2],happy[3]),'happy.csv')
write.csv(cbind(happy[2],happy[3]),'happy.csv', row.names=FALSE)
write.csv(cbind(happy[2],happy[3]),'happy.csv', row.names=FALSE,col.names=FALSE)
write.csv(cbind(happy[2],happy[3]),'happy.csv', row.names=FALSE,col.names=F)
write.table(cbind(happy[2],happy[3]),'happy.csv',sep="\t", row.names=FALSE, col.names=FALSE)
write.table(cbind(happy[2],happy[3]),'happy.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(happy[2],happy[3]),'happy.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(veryhappy[2],veryhappy[3]),'veryhappy.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(normal[2],normal[3]),'normal.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(partialstress[2],partialstress[3]),'partialstress.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(highstress[2],highstress[3]),'highstress.csv',sep=",", row.names=FALSE, col.names=FALSE)
colnames(afinn)
write.table(afinn,'afinn.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(afinn$rating,afinn$name),'afinn.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(cbind(afinn$rating,afinn$name),'afinn.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(afinn,'afinn.csv',sep=",", row.names=FALSE, col.names=FALSE)
write.table(afinn,'afinn.csv',sep=",", row.names=FALSE, col.names=FALSE)
sms_raw <- read.csv("https://raw.githubusercontent.com/brenden17/sklearnlab/master/spam/sms_spam.csv", stringsAsFactors = FALSE)
